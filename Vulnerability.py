# Python 3.6+
# pip install gql==3.0.0a5 aiohttp==3.7.3

import http.client
import json
from gql import gql, Client
from gql.transport.aiohttp import AIOHTTPTransport

client_id = "CLIENT_ID"
client_secret = "CLIENT_SECRET"

# The GraphQL query that defines which data you wish to fetch.
query = gql("""
  query IssuesTable($filterBy: IssueFilters, $first: Int, $after: String, $orderBy: IssueOrder) {
    issues(filterBy: $filterBy, first: $first, after: $after, orderBy: $orderBy) {
      nodes {
        ...IssueDetails
      }
      pageInfo {
        hasNextPage
        endCursor
      }
      totalCount
      informationalSeverityCount
      lowSeverityCount
      mediumSeverityCount
      highSeverityCount
      criticalSeverityCount
      uniqueEntityCount
    }
  }
    
      fragment IssueDetails on Issue {
    id
    control {
      id
      name
      query
    }
    createdAt
    updatedAt
    projects {
      id
      name
      businessUnit
      riskProfile {
        businessImpact
      }
    }
    status
    severity
    entity {
      id
      name
      type
    }
    entitySnapshot {
      id
      type
      name
    }
    note
    serviceTicket {
      externalId
      name
      url
    }
  }
""")

# The variables sent along with the above query
variables = {
  'first': 20,
  'filterBy': {
    'severity': [
      'CRITICAL'
    ],
    'status': [
      'OPEN',
      'IN_PROGRESS'
    ]
  },
  'orderBy': {
    'field': 'SEVERITY',
    'direction': 'DESC'
  }
}

def query_wiz_api(access_token, query, variables):  
  """Qeury WIZ API for the given query data schema"""
  transport = AIOHTTPTransport(
    url="https://api.eu1.app.wiz.io/graphql",
    headers={'Authorization': 'Bearer ' + access_token}
  )
  client = Client(transport=transport, fetch_schema_from_transport=True, execute_timeout=55)
  
  # Fetch the query!
  result = client.execute(query, variable_values=variables)
  return result

def request_wiz_api_token(client_id, client_secret):  
  """Retrieve an OAuth access token to be used against Wiz API"""
  headers = {
    "content-type": "application/x-www-form-urlencoded"
  }
  payload = f"grant_type=client_credentials&client_id={client_id}&client_secret={client_secret}&audience=beyond-api"

  conn = http.client.HTTPSConnection("auth.wiz.io")
  conn.request("POST", f"/oauth/token", payload, headers)
  res = conn.getresponse()
  token_str = res.read().decode("utf-8")

  return json.loads(token_str)["access_token"]

token = request_wiz_api_token(client_id, client_secret)


while (True):
  result = query_wiz_api(token, query, variables)
  print(json.dumps(result))


  pageInfo = result["issues"]["pageInfo"]

  # Check if there are additional results
  if pageInfo["hasNextPage"]:
    # Update variables to fetch the next batch of items
    variables["after"] = pageInfo["endCursor"]
  else:
    # No additional results. End the loop/
    break